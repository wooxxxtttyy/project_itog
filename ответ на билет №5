Протокол RPC (remote procedure call)
принципы проектирования RPC протокола реализация RPC протокола поверх НТТР запросов
• передача данных для выполнения RPC запроса
• особенности маршрутизации/балансировки RPC запросов
• передача результатов выполнения запроса

Описать особенности реализации RPC протокола (сравнительная характеристика c REST API). Передача параметров запроса / результатов ответа, форматы сериализации данных (на примере JSON).

----------------------------

▎Принципы проектирования RPC протокола
1. Абстракция вызова: RPC позволяет вызывать функции или процедуры на удаленных системах так же, 
как если бы они были локальными. Это абстрагирует детали сетевого взаимодействия.
2. Синхронность и асинхронность: RPC может поддерживать как синхронные, так и асинхронные вызовы. 
Синхронные вызовы блокируют выполнение до получения ответа, в то время как асинхронные позволяют продолжать выполнение.
3. Простота использования: Разработчики могут использовать RPC, не углубляясь в детали сетевого программирования. 
Это повышает продуктивность.
4. Протокол независимости: RPC может быть реализован поверх различных транспортных протоколов, таких как TCP, UDP или HTTP.

▎Реализация RPC протокола поверх HTTP запросов

RPC может быть реализован с использованием HTTP в качестве транспортного протокола, 
что позволяет использовать его в веб-приложениях. В этом случае запросы и ответы передаются через HTTP, 
что упрощает интеграцию с существующими веб-технологиями.

▎Особенности маршрутизации/балансировки RPC запросов
• Маршрутизация: В зависимости от реализации, маршрутизация может происходить на уровне сервера, 
где запросы направляются к различным обработчикам в зависимости от метода.
  
• Балансировка нагрузки: Балансировка нагрузки может быть реализована с использованием прокси-серверов 
или специализированных сервисов (например, NGINX, HAProxy), которые распределяют входящие запросы между 
несколькими экземплярами сервиса.

▎Сравнительная характеристика RPC и REST API

▎Передача параметров запроса и результатов ответа
• RPC: Параметры передаются в виде объектов (например, JSON), которые могут содержать сложные структуры данных.
• REST API: Параметры часто передаются через URL (параметры запроса) или в теле запроса (для POST). 
Результаты также возвращаются в виде объектов (JSON/XML).

▎Форматы сериализации данных
• JSON: Широко используется благодаря своей простоте и совместимости с JavaScript.
• XML: Используется реже из-за большей сложности по сравнению с JSON.

RPC и REST API имеют свои преимущества и недостатки. Выбор между ними зависит от требований проекта, 
таких как производительность, гибкость и удобство использования. RPC подходит для сценариев, 
где важна высокая производительность и возможность выполнения сложных операций, тогда как REST API 
лучше подходит для работы с ресурсами и взаимодействия с веб-приложениями.
